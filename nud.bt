//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: nud
//   Authors: Zarklord & smb123win64gb & rtb
//   Version: 0.1
//   Purpose: model file
//  Category: 3d
//  ID ubytes: 4E 44 50 33
//------------------------------------------------
local int i,j,k,l,m,n,length,temp;
local int verStart;
local int faceClumpStartPoint;
local int vertexClumpStartPoint;
local int vertexAddClumpStartPoint;
local int nameClumpStart;
local int nameRewind,rewind = 0;
local int faceAmountCalc = 0;
local int UVSizeCalc = 0;

typedef struct (int faceStart,int faceAmount,int faceSize){
    verStart = (faceAmount * 2) + FTell();
    if(faceSize == 0x00) {
        short f3;
        temp = f3;
        if (temp == 0xFFFF) {
            short f1;
            short f2;
        } else {
            temp += 1;
        }
        while(FTell() != verStart){
            short f3;
            temp = f3;
            if (temp == 0xFFFF) {
                short f1;
                short f2;
            } else {
                temp += 1;
            }
        }
    } else if(faceSize == 0x40) {
        for(n=0;n<(faceAmount/3);n++){
            short fa;
            short fb;
            short fc;
        }
    }
}FACES <bgcolor=cDkPurple,optimize=false>;

int calcFacesSize(FACES &f){
    return faceAmountCalc*2;
}

typedef struct (int UVSize) {
    if(UVSize == 0x12 || UVSize == 0x22 || UVSize == 0x32 || UVSize == 0x42) {
        struct VERTCOLORS{
            ubyte colorR;
            ubyte colorG;
            ubyte colorB;
            ubyte colorA;
        }vertcolors;
    } else if(UVSize == 0x14 || UVSize == 0x24 || UVSize == 0x34 || UVSize == 0x44) {
        struct BINORMALS{
            hfloat bnx;
            hfloat bny;
            hfloat bnz;
            hfloat bnq;
        }binormals;
    }
    hfloat tu;
    hfloat tv;
    if(UVSize >= 0x20) {
        hfloat tu2;
        hfloat tv2;
    }
    if(UVSize >= 0x30) {
        hfloat tu3;
        hfloat tv3;
    }
    if(UVSize >= 0x40) {
        hfloat tu4;
        hfloat tv4;
    }
}UVS <bgcolor=cAqua>;

int calcUVSize(UVS &u) {
    length = 0;
    if(UVSizeCalc == 0x12 || UVSizeCalc == 0x22 || UVSizeCalc == 0x32 || UVSizeCalc == 0x42) {
        length += 4;
    } else if(UVSizeCalc == 0x14 || UVSizeCalc == 0x24 || UVSizeCalc == 0x34 || UVSizeCalc == 0x44) {
        length += 8;
    }
    length += 4;
    if(UVSizeCalc >= 0x20) {
        length += 4;
    }
    if(UVSizeCalc >= 0x30) {
        length += 4;
    }
    if(UVSizeCalc >= 0x40) {
        length += 4;
    }
    return length;
}

typedef struct (int vertexAmount, int vertexStart, int vertexSize, int UVSize, int vertexAddStart){
    for(m=0;m < vertexAmount;m++) {
        FSeek(vertexClumpStartPoint + vertexStart + (getVertSeekSize(vertexSize,UVSize)*m));
        if(vertexSize == 0x0) {
            struct VERTSET0{
                float vx;
                float vy;
                float vz;
                float vq;
            }vertSet0<bgcolor=cLtAqua,size=16>;
        } else if(vertexSize == 0x6) {
            struct VERTSET6{
                float vx;
                float vy;
                float vz;
                hfloat nx;
                hfloat ny;
                hfloat nz;
                hfloat nq;
            }vertSet6<bgcolor=cLtAqua,size=20>;
        } else if(vertexSize == 0x7) {
            struct VERTSET7(int UVSize){
                float vx;
                float vy;
                float vz;
                hfloat nx;
                hfloat ny;
                hfloat nz;
                hfloat nq;
                hfloat bnx;
                hfloat bny;
                hfloat bnz;
                hfloat bnq;
                hfloat tanx;
                hfloat tany;
                hfloat tanz;
                hfloat tanq;
            }vertSet7<bgcolor=cLtAqua,size=36>;
        } else if(vertexSize == 0x8) {
            struct VERTSET8{
                hfloat nx;
                hfloat ny;
                hfloat nz;
                hfloat nq;
                hfloat unk1;
                hfloat unk2;
                hfloat unk3;
                hfloat unk4;
                hfloat unk5;
            }vertSet8<bgcolor=cLtAqua,size=18>;
        }
        UVS uvs(UVSize);
        FSeek(vertexAddClumpStartPoint + vertexAddStart + (getVertAddSeekSize(vertexSize)*m));
        if(vertexSize == 0x11) {
            struct VERTADD11{
                float vx;
                float vy;
                float vz;
                float nx;
                float ny;
                float nz;
                float nq;
                float nr;
                long bone1;
                long bone2;
                long bone3;
                long bone4;
                float weight1;
                float weight2;
                float weight3;
                float weight4;
            }vertAdd11<bgcolor=cDkAqua,size=64>;
        } else if(vertexSize == 0x13) {
            struct VERTADD13{
                float vx;
                float vy;
                float vz;
                float vq;
                float nx;
                float ny;
                float nz;
                float nq;
                float bnx;
                float bny;
                float bnz;
                float bnq;
                float tanx;
                float tany;
                float tanz;
                float tanq;
                long bone1;
                long bone2;
                long bone3;
                long bone4;
                float weight1;
                float weight2;
                float weight3;
                float weight4;
            }vertAdd13<bgcolor=cDkAqua,size=96>;
        } else if(vertexSize == 0x16) {
            struct VERTADD16{
                float vx;
                float vy;
                float vz;
                float vq;
                hfloat nx;
                hfloat ny;
                hfloat nz;
                hfloat nq;
                long bone1;
                long bone2;
                long bone3;
                long bone4;
                float weight1;
                float weight2;
                float weight3;
                float weight4;
            }vertAdd16<bgcolor=cDkAqua,size=56>;
        } else if(vertexSize == 0x17) {
            struct VERTADD17{
                float vx;
                float vy;
                float vz;
                float vq;
                hfloat nx;
                hfloat ny;
                hfloat nz;
                hfloat nq;
                hfloat bnx;
                hfloat bny;
                hfloat bnz;
                hfloat bnq;
                hfloat tanx;
                hfloat tany;
                hfloat tanz;
                hfloat tanq;
                long bone1;
                long bone2;
                long bone3;
                long bone4;
                float weight1;
                float weight2;
                float weight3;
                float weight4;
            }vertAdd17<bgcolor=cDkAqua,size=72>;
        } else if(vertexSize == 0x40) {
            struct VERTADD40{
                float vx;
                float vy;
                float vz;
                float floatyval;
                ubyte bone1;
                ubyte bone2;
                ubyte bone3;
                ubyte bone4;
                ubyte weight1;
                ubyte weight2;
                ubyte weight3;
                ubyte weight4;
            }vertAdd40<bgcolor=cDkAqua,size=24>;
        } else if(vertexSize == 0x46) {
            struct VERTADD46{
                float vx;
                float vy;
                float vz;
                hfloat nx;
                hfloat ny;
                hfloat nz;
                hfloat nq;
                ubyte bone1;
                ubyte bone2;
                ubyte bone3;
                ubyte bone4;
                ubyte weight1;
                ubyte weight2;
                ubyte weight3;
                ubyte weight4;
            }vertadd46<bgcolor=cDkAqua,size=28>;
        } else if(vertexSize == 0x47) {
            struct VERTADD47{
                float vx;
                float vy;
                float vz;
                hfloat nx;
                hfloat ny;
                hfloat nz;
                hfloat nq;
                hfloat bnx;
                hfloat bny;
                hfloat bnz;
                hfloat bnq;
                hfloat tanx;
                hfloat tany;
                hfloat tanz;
                hfloat tanq;
                ubyte bone1;
                ubyte bone2;
                ubyte bone3;
                ubyte bone4;
                ubyte weight1;
                ubyte weight2;
                ubyte weight3;
                ubyte weight4;
            }vertAdd47<bgcolor=cDkAqua,size=44>;    
        }
    }                    
}VERTS;

int getVertSeekSize(int vertSize,int UVSize) {
    length = 0;
    if (vertSize == 0x0) {
        length += 16;
    } else if (vertSize == 0x6) {
        length += 20;
    } else if (vertSize == 0x7) {
        length += 36;
    } else if (vertSize == 0x8) {
        length += 18;
    }
    if(UVSize == 0x12 || UVSize == 0x22 || UVSize == 0x32 || UVSize == 0x42) {
        length += 4;
    } else if(UVSize == 0x14 || UVSize == 0x24 || UVSize == 0x34 || UVSize == 0x44) {
        length += 8;
    }
    length += 4;
    if(UVSize >= 0x20) {
        length += 4;
    }
    if(UVSize >= 0x30) {
        length += 4;
    }
    if(UVSize >= 0x40) {
        length += 4;
    }
    return length;
}

int getVertAddSeekSize(int vertSize) {
    length = 0;
    if (vertSize == 0x11) {
        length += 64;
    } else if (vertSize == 0x13) {
        length += 96;
    } else if (vertSize == 0x16) {
        length += 56;
    } else if (vertSize == 0x17) {
        length += 72;
    } else if (vertSize == 0x40) {
        length += 24;
    } else if (vertSize == 0x46) {
        length += 28;
    } else if (vertSize == 0x47) {
        length += 44;
    }
    return length;
}

typedef struct {
    uint32 isLast;
    uint32 stringOffset;

    SetBackColor(cLtGreen);
    nameRewind = FTell();
    FSeek(nameClumpStart + stringOffset);
    char name[ReadStringLength(FTell()) - 1];
    FSeek(nameRewind);
    SetBackColor(cNone);

    uint32 numberOfFloats;
    //padding or unk?
    FSkip(4);
    if(Strcmp(name,"NU_materialHash") != 0) {
        float materialValue[numberOfFloats];
    } else {
        uint32 materialValue[4] <format=hex>;
    }
}MATERIALDAT <read=MaterialString,bgcolor=cRed>;

string MaterialString(MATERIALDAT &m) {
    string MATS;
    string TEMP;
    if(Strcmp(m.name,"NU_materialHash") != 0) {
        MATS = "";
        for(k=0;k < m.numberOfFloats;k++) {
            SPrintf(TEMP, "%.2f ",m.materialValue[k] * 255);
            MATS += TEMP;
        }
    } else {
        SPrintf(TEMP, "%08x ",m.materialValue[0]);
        MATS = TEMP + "0 0 0";
    }
    return m.name + " " + MATS;
}

typedef struct {
    //start of textureid data
    ubyte baseID <format=hex>;
    ubyte groupID <format=hex>;
    ubyte subgroupID <format=hex>;
    ubyte textureID <format=hex>;
    //padding or unk?
    FSkip(6);
    uint16 firstLayerMapMode <format=hex>;
    uint16 wrapMode <format=hex>;
    ubyte minFilter <format=hex>;
    ubyte magFilter <format=hex>;
    //???
    FSkip(1);
    //???
    FSkip(1);
    //padding or unk?
    FSkip(6);
}TEXTURE <read=TextureID,bgcolor=cLtRed,optimize=true,size=0x18>;

string TextureID(TEXTURE &t) {
    string ID;
    SPrintf(ID, "%02x%02x%02x%02x",t.baseID,t.groupID,t.subgroupID,t.textureID);
    return "Texture ID: 0x"+ID;
}

typedef struct {
    struct FLAGS{
        //materialFlags
        //first 4 bits = Material Type
        //next 4 bits = ?????
        ubyte matData <format=hex>;
        ubyte fog <format=hex>;
        ubyte texLayers <format=hex>;
        ubyte materialEffects <format=hex>;
        //padding or unk?
        FSkip(5);
        //transparency section
        uint16 firstTransparencySection <format=hex>;
        ubyte texCount;
        uint32 secondTransparencySection <format=hex>;
        //rest of mat flags
        uint16 drawPriority;
        ubyte cullMode <format=hex>;
        //???
        FSkip(1);
        //padding or unk?
        FSkip(4);
        //maybe used for watery effect?
        uint32 unk1 <format=hex>;
        //padding or unk?
        FSkip(4);
    }flags<bgcolor=cDkRed,size=0x20>;
    TEXTURE texture[flags.texCount];
    MATERIALDAT materialDat;
    l = 0;
    while(materialDat[l].isLast != 0) {
        MATERIALDAT materialDat;
        l++;
    }
}MATERIAL;

typedef struct {
    struct POLYDATA{
        uint32 faceStart;
        uint32 vertexStart;
        uint32 vertexAddStart;
        uint16 vertexAmount;
        ubyte vertexSize;
        ubyte UVSize;
        uint32 texProp1;
        uint32 texProp2;
        uint32 texProp3;
        uint32 texProp4;
        uint16 faceAmount;
        ubyte faceSize;
        ubyte boneCount;
        faceAmountCalc = faceAmount;
        UVSizeCalc = UVSize;
        //padding
        FSkip(0x0C);
    }polydata<bgcolor=cSilver>;
    struct MATERIALS{
        FSeek(polydata.texProp1);
        MATERIAL material;
        if(polydata.texProp2 != 0) {
            FSeek(polydata.texProp2);
            MATERIAL material;
        }
        if(polydata.texProp3 != 0) {
            FSeek(polydata.texProp3);
            MATERIAL material;
        }
        if(polydata.texProp4 != 0) {
            FSeek(polydata.texProp4);
            MATERIAL material;
        }
    }materials;
    VERTS verts(polydata.vertexAmount,polydata.vertexStart,polydata.vertexSize,polydata.UVSize,polydata.vertexAddStart);
    FSeek(faceClumpStartPoint + polydata.faceStart + (polydata.faceAmount*6));
    FACES faces(polydata.faceStart,polydata.faceAmount,polydata.faceSize);
}POLY;

typedef struct {
    struct POLYSETDATA{
        FSkip(0x20);
        uint32 stringNameOffset;
        uint32 boneNumber;
        uint16 bind;
        uint16 numOfSubPolys;
        uint32 startPosForNext;
    }polysetData<bgcolor=cBlue>;

    SetBackColor(cPurple);
    nameRewind = FTell();
    FSeek(nameClumpStart + polysetData.stringNameOffset);
    char name[ReadStringLength(FTell()) - 1];
    FSeek(nameRewind);
    SetBackColor(cNone);

    rewind = FTell();
    for(i=0;i < polysetData.numOfSubPolys;i++) {
        FSeek(polysetData.startPosForNext + (0x30*i));
        POLY poly;
    }
    FSeek(rewind);   
}POLYSET <read=PolysetName>;

string PolysetName(POLYSET &p) {
    return p.name;
}

typedef struct{
    char header[4];
    if(header == "NDWD") {
        LittleEndian();
    } else if(header == "NDP3"){
        BigEndian();
    }
    uint32 fileSize;
    uint16 magic1;
    uint16 numOfPolys;
    uint16 magic2;
    uint16 numOfBones;
    uint32 faceClumpStart;
    faceClumpStartPoint = faceClumpStart + 0x30;
    uint32 faceClumpSize;
    vertexClumpStartPoint = faceClumpStartPoint + faceClumpSize;
    uint32 vertexClumpSize;
    vertexAddClumpStartPoint = vertexClumpStartPoint + vertexClumpSize;
    uint32 vertexAddClumpSize;
    nameClumpStart = vertexAddClumpStartPoint + vertexAddClumpSize;
    //padding
    FSkip(0x10);
}HEADER<bgcolor=cYellow>;

struct FILE{
    HEADER header;
    for(j=0;j < header.numOfPolys;j++){
        POLYSET polyset;
    }
}file;